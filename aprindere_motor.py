import RPi.GPIO as GPIO
import time

# Definire GPIO-uri pentru puntea H
GPIO_AB_1 = 5   # A
GPIO_AB_2 = 6   # B
GPIO_CD_1 = 19  # C
GPIO_CD_2 = 26  # D

# IniÈ›ializare GPIO
GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)

# SetÄƒm pinii ca OUTPUT È™i LOW la pornire
motor_pins = [GPIO_AB_1, GPIO_AB_2, GPIO_CD_1, GPIO_CD_2]
for pin in motor_pins:
    GPIO.setup(pin, GPIO.OUT, initial=GPIO.LOW)  # AsigurÄƒm cÄƒ pinii PORNESC LOW

# Timp mort Ã®ntre schimbÄƒrile de direcÈ›ie
DELAY_SEC = 3

def motor_inainte():
    """ActiveazÄƒ motorul Ã®nainte (AB) cu protecÈ›ie"""
    oprire_motoare()
    time.sleep(DELAY_SEC)
    GPIO.output(GPIO_AB_1, GPIO.HIGH)
    GPIO.output(GPIO_AB_2, GPIO.HIGH)

def motor_inapoi():
    """ActiveazÄƒ motorul Ã®napoi (CD) cu protecÈ›ie"""
    oprire_motoare()
    time.sleep(DELAY_SEC)
    GPIO.output(GPIO_CD_1, GPIO.HIGH)
    GPIO.output(GPIO_CD_2, GPIO.HIGH)

def oprire_motoare():
    """OpreÈ™te toate motoarele È™i reseteazÄƒ GPIO-urile"""
    print("ðŸ›‘ Oprire motoare È™i resetare GPIO-uri la LOW...")
    for pin in motor_pins:
        GPIO.output(pin, GPIO.LOW)

def cleanup_gpio():
    """AsigurÄƒ resetarea GPIO-urilor"""
    oprire_motoare()
    time.sleep(DELAY_SEC)  # MicÄƒ Ã®ntÃ¢rziere pentru siguranÈ›Äƒ
    GPIO.cleanup()

# Testare comenzi
if __name__ == "__main__":
    try:
        print("Pornire motor Ã®nainte...")
        motor_inainte()
        time.sleep(DELAY_SEC)
        
        print("Oprire...")
        oprire_motoare()
        time.sleep(DELAY_SEC)
        
        print("Pornire motor Ã®napoi...")
        motor_inapoi()
        time.sleep(DELAY_SEC)
        
        print("Oprire finalÄƒ...")
        oprire_motoare()

    except KeyboardInterrupt:
        print("\nðŸ”´ Oprire de urgenÈ›Äƒ!")
        cleanup_gpio()
    finally:
        cleanup_gpio()
